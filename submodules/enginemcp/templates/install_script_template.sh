#!/bin/bash

# MCP Servers Installation Script Template
# Generated by PilotWP EngineMCP

set -e  # Exit on any error

echo "ðŸš€ PilotWP EngineMCP - MCP Servers Installation"
echo "=============================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Node.js is installed
check_nodejs() {
    if command -v node &> /dev/null && command -v npm &> /dev/null; then
        NODE_VERSION=$(node --version)
        NPM_VERSION=$(npm --version)
        print_success "Node.js $NODE_VERSION and npm $NPM_VERSION are installed"
        return 0
    else
        print_error "Node.js and npm are required but not installed"
        echo "Please install Node.js from https://nodejs.org/"
        return 1
    fi
}

# Install Smithery CLI if not present
install_smithery() {
    print_status "Installing/updating Smithery CLI..."
    npm install -g @smithery/cli@latest
    print_success "Smithery CLI installed"
}

# Install individual MCP servers
install_mcp_servers() {
    print_status "Installing MCP servers..."
    
    # Array of MCP servers to install
    declare -a servers=(
{{SERVERS_LIST}}
    )
    
    declare -a server_names=(
{{SERVERS_NAMES}}
    )
    
    echo ""
    for i in "${!servers[@]}"; do
        print_status "Installing ${server_names[$i]} (${servers[$i]})..."
        
        # Try to install via npm first
        if npm install -g "${servers[$i]}" 2>/dev/null; then
            print_success "${server_names[$i]} installed via npm"
        else
            print_warning "Failed to install ${server_names[$i]} via npm, trying npx cache..."
            # Pre-cache the package for npx usage
            npx -y "${servers[$i]}" --help &>/dev/null || true
            print_success "${server_names[$i]} cached for npx usage"
        fi
    done
}

# Create Claude Desktop configuration
create_claude_config() {
    print_status "Creating Claude Desktop configuration..."
    
    # Determine the correct config path based on OS
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        CONFIG_DIR="$HOME/Library/Application Support/Claude"
        CONFIG_FILE="$CONFIG_DIR/claude_desktop_config.json"
    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
        # Windows (Git Bash/MSYS)
        CONFIG_DIR="$APPDATA/Claude"
        CONFIG_FILE="$CONFIG_DIR/claude_desktop_config.json"
    else
        # Linux and others
        CONFIG_DIR="$HOME/.config/claude"
        CONFIG_FILE="$CONFIG_DIR/claude_desktop_config.json"
    fi
    
    # Create directory if it doesn't exist
    mkdir -p "$CONFIG_DIR"
    
    print_success "Claude Desktop configuration template ready at: $CONFIG_FILE"
    print_warning "Please update the configuration with your API keys"
}

# Create Cursor configuration
create_cursor_config() {
    print_status "Creating Cursor configuration..."
    
    # Global Cursor config
    CURSOR_CONFIG_DIR="$HOME/.cursor"
    CURSOR_CONFIG_FILE="$CURSOR_CONFIG_DIR/mcp.json"
    
    mkdir -p "$CURSOR_CONFIG_DIR"
    
    print_success "Cursor configuration template ready at: $CURSOR_CONFIG_FILE"
    print_warning "Please update the configuration with your API keys"
}

# Test MCP server installation
test_installations() {
    print_status "Testing MCP server installations..."
    
    # Test a few key servers
    declare -a test_servers=(
        "@modelcontextprotocol/server-sequential-thinking"
        "@nickclyde/duckduckgo-mcp-server"
    )
    
    for server in "${test_servers[@]}"; do
        if npx -y "$server" --help &>/dev/null; then
            print_success "$server is working"
        else
            print_warning "$server may have issues"
        fi
    done
}

# Main installation process
main() {
    echo "Starting PilotWP EngineMCP installation..."
    echo ""
    
    # Check prerequisites
    if ! check_nodejs; then
        exit 1
    fi
    
    # Install components
    install_smithery
    install_mcp_servers
    create_claude_config
    create_cursor_config
    test_installations
    
    echo ""
    echo "ðŸŽ‰ PilotWP EngineMCP Installation Complete!"
    echo "=========================================="
    echo ""
    echo "Next steps:"
    echo "1. Configure API keys in WordPress Admin: PilotWP > EngineMCP"
    echo "2. Download configuration files from the admin panel"
    echo "3. Restart Claude Desktop or Cursor"
    echo "4. Test MCP servers in your AI conversations"
    echo ""
    print_success "Your MCP servers are ready to use with PilotWP!"
}

# Run the main function
main "$@"